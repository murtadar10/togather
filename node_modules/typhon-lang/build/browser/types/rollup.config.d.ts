declare const _default: ({
    input: string;
    output: ({
        file: string;
        format: string;
        name: string;
        sourcemap: boolean;
    } | {
        file: string;
        format: string;
        sourcemap: boolean;
        name?: undefined;
    })[];
    plugins: import("rollup").Plugin[];
    external?: undefined;
} | {
    input: string;
    output: {
        file: string;
        format: string;
    }[];
    external: RegExp[];
    plugins: {
        name: string;
        outputOptions: (this: import("rollup").PluginContext, options: import("rollup").OutputOptions) => {
            chunkFileNames: string | ((chunkInfo: import("rollup").PreRenderedChunk) => string);
            entryFileNames: string | ((chunkInfo: import("rollup").PreRenderedChunk) => string);
            format: "es";
            exports: "named";
            compact: false;
            freeze: true;
            interop: "esModule";
            generatedCode: {
                symbols: boolean;
            } & (import("rollup").GeneratedCodePreset | import("rollup").GeneratedCodeOptions);
            strict: false;
            amd?: import("rollup").AmdOptions;
            assetFileNames?: string | ((chunkInfo: import("rollup").PreRenderedAsset) => string);
            banner?: string | import("rollup").AddonFunction;
            dir?: string;
            dynamicImportFunction?: string;
            dynamicImportInCjs?: boolean;
            esModule?: boolean | "if-default-prop";
            experimentalDeepDynamicChunkOptimization?: boolean;
            experimentalMinChunkSize?: number;
            extend?: boolean;
            externalImportAssertions?: boolean;
            externalLiveBindings?: boolean;
            file?: string;
            footer?: string | import("rollup").AddonFunction;
            globals?: import("rollup").GlobalsOption;
            hoistTransitiveImports?: boolean;
            indent?: string | boolean;
            inlineDynamicImports?: boolean;
            intro?: string | import("rollup").AddonFunction;
            manualChunks?: import("rollup").ManualChunksOption;
            minifyInternalExports?: boolean;
            name?: string;
            namespaceToStringTag?: boolean;
            noConflict?: boolean;
            outro?: string | import("rollup").AddonFunction;
            paths?: import("rollup").OptionsPaths;
            plugins?: import("rollup").OutputPluginOption;
            preferConst?: boolean;
            preserveModules?: boolean;
            preserveModulesRoot?: string;
            sanitizeFileName?: boolean | ((fileName: string) => string);
            sourcemap?: boolean | "inline" | "hidden";
            sourcemapBaseUrl?: string;
            sourcemapExcludeSources?: boolean;
            sourcemapFile?: string;
            sourcemapPathTransform?: import("rollup").SourcemapPathTransformOption;
            systemNullSetters?: boolean;
            validate?: boolean;
        };
        renderChunk: (this: import("rollup").PluginContext, code: string, chunk: import("rollup").RenderedChunk, options: import("rollup").NormalizedOutputOptions) => {
            code: string;
            map: {
                mappings: "";
            };
        };
        options(this: import("rollup").MinimalPluginContext, options: import("rollup").InputOptions): {
            onwarn(warning: import("rollup").RollupLog, warn: import("rollup").WarningHandler): void;
            treeshake: {
                moduleSideEffects: "no-external";
                propertyReadSideEffects: true;
                unknownGlobalSideEffects: false;
            };
            acorn?: Record<string, unknown>;
            acornInjectPlugins?: (() => unknown)[] | (() => unknown);
            cache?: false | import("rollup").RollupCache;
            context?: string;
            experimentalCacheExpiry?: number;
            external?: import("rollup").ExternalOption;
            inlineDynamicImports?: boolean;
            input?: import("rollup").InputOption;
            makeAbsoluteExternalsRelative?: boolean | "ifRelativeSource";
            manualChunks?: import("rollup").ManualChunksOption;
            maxParallelFileOps?: number;
            maxParallelFileReads?: number;
            moduleContext?: ((id: string) => string | void) | {
                [id: string]: string;
            };
            perf?: boolean;
            plugins?: import("rollup").InputPluginOption;
            preserveEntrySignatures?: import("rollup").PreserveEntrySignaturesOption;
            preserveModules?: boolean;
            preserveSymlinks?: boolean;
            shimMissingExports?: boolean;
            strictDeprecations?: boolean;
            watch?: false | import("rollup").WatcherOptions;
        };
        transform(this: import("rollup").TransformPluginContext, code: string, id: string): {
            code: string;
            ast: any;
            map: any;
        };
        resolveId(this: import("rollup").PluginContext, source: string, importer: string): {
            id: string;
            external: true;
        } | {
            id: string;
            external?: undefined;
        };
    }[];
})[];
export default _default;
